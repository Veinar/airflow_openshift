# Configuration for a Kubernetes ConfigMap
kind: ConfigMap
apiVersion: v1
metadata:
  name: webserver-config
  namespace: ${namespace}
data:
  webserver_config.py: |
    #
    # Licensed to the Apache Software Foundation (ASF) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The ASF licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.
    """Default configuration for the Airflow webserver."""
    from __future__ import annotations

    import os

    #from airflow.www.fab_security.manager import AUTH_DB

    from airflow.www.fab_security.manager import AUTH_LDAP
    # from airflow.www.fab_security.manager import AUTH_OAUTH
    # from airflow.www.fab_security.manager import AUTH_OID
    # from airflow.www.fab_security.manager import AUTH_REMOTE_USER


    basedir = os.path.abspath(os.path.dirname(__file__))

    # Flask-WTF flag for CSRF
    WTF_CSRF_ENABLED = True
    WTF_CSRF_TIME_LIMIT = None

    # ----------------------------------------------------
    # AUTHENTICATION CONFIG
    # ----------------------------------------------------
    # For details on how to set up each of the following authentication, see
    # http://flask-appbuilder.readthedocs.io/en/latest/security.html# authentication-methods
    # for details.

    # The authentication type
    # AUTH_OID : Is for OpenID
    # AUTH_DB : Is for database
    # AUTH_LDAP : Is for LDAP
    # AUTH_REMOTE_USER : Is for using REMOTE_USER from web server
    # AUTH_OAUTH : Is for OAuth
    AUTH_TYPE = AUTH_LDAP

    # When using LDAP Auth, setup the ldap server
    AUTH_LDAP_SERVER = "${ldap_server}"
    AUTH_LDAP_USE_TLS = False
    # searches
    AUTH_LDAP_SEARCH = "${ldap_search_base}"  # the LDAP search base example: ou=users,dc=example,dc=com
    AUTH_LDAP_UID_FIELD = "sAMAccountName"  # the username field
    # bind user:
    AUTH_LDAP_BIND_USER = "{ldap_bind_user_full_dn}"
    AUTH_LDAP_BIND_PASSWORD = "${ldap_bind_password}"
    # registration configs
    AUTH_USER_REGISTRATION = True  # allow users who are not already in the FAB DB
    AUTH_USER_REGISTRATION_ROLE = "Public"  # this role will be given in addition to any AUTH_ROLES_MAPPING
    AUTH_LDAP_FIRSTNAME_FIELD = "givenName"
    AUTH_LDAP_LASTNAME_FIELD = "sn"
    AUTH_LDAP_EMAIL_FIELD = "mail"  # if null in LDAP, email is set to: "{username}@email.notfound"
    # a mapping from LDAP DN to a list of FAB roles
    AUTH_ROLES_MAPPING = {
        "${ldap_admins_group_full_dn}": ["Admin"],
        "${ldap_users_group_full_dn}": ["User"],
    }
    # the LDAP user attribute which has their role DNs
    AUTH_LDAP_GROUP_FIELD = "memberOf"
    # if we should replace ALL the user's roles each login, or only on registration
    AUTH_ROLES_SYNC_AT_LOGIN = True
    # (automatic update workaround) force users to re-auth after 30min of inactivity (to keep roles in sync)
    # PERMANENT_SESSION_LIFETIME = 1800 
